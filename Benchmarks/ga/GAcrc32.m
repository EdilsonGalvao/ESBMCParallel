% ----- Universidade Federal do Amazonas ------
% ----- Mestrado em Engenharia Elétrica  ------
% ----- Prof.: Lucas Cordeiro -----------------
% ----- Aluno: Alesssandro Bezerra Trindade ---
% -----  Manaus, março de 2015 --------------
% ---------------------------------------------
clc;
clear all;
fprintf('\n--------------------------------------\n');
fprintf(' Genetic Algorithm with Matlab\n');
fprintf(' Using ga function\n');
fprintf('--------------------------------------\n');
fprintf('------ 25 nodes and 32 edges -------\n');
fprintf('--------------------------------------\n');
%
% ----------------------
% tamanho de f: nodos + arestas
% tamanho de A: nodos + arestas
% b tem dimensão (2*arestas + 1)
nodos = 25;
arestas = 32;
fprintf('nodes = %d\n', nodos);
fprintf('edges = %d\n', arestas);
I = eye(arestas);
h = [2 2 0 2 0 1 1 0 0 0 1 1 0 1 2 0 1 2 2 2 0 0 0 0 0];
s = [1 2 1 1 2 1 1 3 1 1 1 1 1 1 2 1 1 2 1 2 0 0 0 0 0];
c = [11 3 8 4 10 8 5 4 4 9 10 10 7 2 8 3 2 10 11 7 7 6 6 1 12 8 2 10 3 2 7 6];
E = [-1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  -1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  -1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  -1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0];
    
A = vertcat(-s,E,-E);
temp = vertcat (c,-I,-I);
A = horzcat (A, temp);
f = horzcat (h, c); 
%--------S0------------------------------------------------------------------
S0 = 20;
fprintf('S0 = %d\n', S0);
S0 = S0 - 27;
nula = zeros(1,2*arestas);
b = horzcat (S0, nula); 
fprintf('--------------------------------------\n');

nvars = nodos + arestas; % o número total de variáveis é de nodos + arestas
lb = zeros(1,nvars); %limite inferior das variáveis
ub = ones (1,nvars); % limite superior das variáveis
%function fitness declarada abaixo:
f = @(x) 2*x(1) + 2*x(2) + 0*x(3) + 2*x(4)+ 0*x(5) + 1*x(6) + 1*x(7) + 0*x(8) + 0*x(9) + 0*x(10) + 1*x(11) + 1*x(12) + 0*x(13) + 1*x(14)+ 2*x(15) + 0*x(16) + 1*x(17) + 2*x(18) + 2*x(19) + 2*x(20) + 0*x(21) + 0*x(22) + 0*x(23) + 0*x(24)+ 0*x(25);
% declarando as variáveis que assumirão valor inteiro (dimensao nodos +
% arestas)
intcon = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57];
opts = gaoptimset('Generations',75,'PopulationSize',500,'EliteCount',50);
tic
[x,fval,exitflag] = ga(f,nvars,A,b,[],[],lb,ub,[],intcon,opts)
toc
%
fprintf('--------------------------------------\n');
x=x';
fprintf('Optimized Solution of x = \n');
x = x(1:nodos,:);
%x'
%fprintf('--------------------------------------\n');
%fprintf('Min hardware found = \n');
%f = f(:,1:nodos);
%f*x
%fprintf('--------------------------------------\n');
fprintf('Software found\n');
s*(1-x) + c*abs(E*x)
%
fprintf('--------------------------------------\n');
%--------
