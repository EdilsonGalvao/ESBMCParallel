% ----- Universidade Federal do Amazonas ------
% ----- Mestrado em Engenharia Elétrica  ------
% ----- Prof.: Lucas Cordeiro -----------------
% ----- Aluno: Alesssandro Bezerra Trindade ---
% -----  Manaus, março de 2015 --------------
% ---------------------------------------------
clc;
clear all;
fprintf('\n--------------------------------------\n');
fprintf(' Genetic Algorithm with Matlab\n');
fprintf(' Using ga function\n');
fprintf('--------------------------------------\n');
fprintf('------ 21 nodes and 48 edges -------\n');
fprintf('--------------------------------------\n');
%
% ----------------------
% tamanho de f: nodos + arestas
% tamanho de A: nodos + arestas
% b tem dimensão (2*arestas + 1)
nodos = 21;
arestas = 48;
fprintf('nodes = %d\n', nodos);
fprintf('edges = %d\n', arestas);
I = eye(arestas);
h = [3 1 2 3 3 3 0 3 3 2 1 1 2 3 1 14 2 1 3 3 2];
s = [1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 5 1 1 1 1 1];
c = [22 21 12 20 3 15 28 26 30 27 8 26 2 24 28 16 2 5 17 29 10 21 22 18 15 10 16 27 13 27 5 14 9 27 18 20 8 3 28 18 0 25 22 8 8 8 13 12];
E = [-1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  -1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  -1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  -1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  -1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  -1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  0.0  1.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0; 
-1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0; 
0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -1.0  1.0  0.0  0.0  0.0  0.0];


A = vertcat(-s,E,-E);
temp = vertcat (c,-I,-I);
A = horzcat (A, temp);
%f = horzcat (h, c); 
%--------S0------------------------------------------------------------------
S0 = 10;
fprintf('S0 = %d\n', S0);
S0 = S0 - 29;
nula = zeros(1,2*arestas);
nula = nula';
%b = horzcat (S0, nula); 
b = vertcat (S0, nula);
fprintf('--------------------------------------\n');
nvars = nodos + arestas; % o número total de variáveis é de nodos + arestas
lb = zeros(1,nvars); %limite inferior das variáveis
ub = ones (1,nvars); % limite superior das variáveis
%function fitness declarada abaixo:
f = @(x) 3*x(1) + 1*x(2) + 2*x(3) + 3*x(4)+ 3*x(5) + 3*x(6) + 0*x(7) + 3*x(8) + 3*x(9) + 2*x(10) + 1*x(11) + 1*x(12) + 2*x(13) + 3*x(14)+ 1*x(15) + 14*x(16) + 2*x(17) + 1*x(18) + 3*x(19) + 3*x(20) + 2*x(21);
%+ 0*x(22) + 0*x(23) + 0*x(24) + 0*x(25) + 0*x(26) + 0*x(27) + 0*x(28) + 0*x(29) + 0*x(30) + 0*x(31) + 0*x(32) + 0*x(33) + 0*x(34) + 0*x(35) + 0*x(36) + 0*x(37) + 0*x(38) + 0*x(39) + 0*x(40) + 0*x(41) + 0*x(42) + 0*x(43) + 0*x(44) + 0*x(45) + 0*x(46) + 0*x(47) + 0*x(48) + 0*x(49) + 0*x(50) + 0*x(51) + 0*x(52) + 0*x(53) + 0*x(54) + 0*x(55) + 0*x(56) + 0*x(57) + 0*x(58) + 0*x(59) + 0*x(60) + 0*x(61) + 0*x(62) + 0*x(63) + 0*x(64) + 0*x(65) + 0*x(66) + 0*x(67) + 0*x(68) + 0*x(69);
% declarando as variáveis que assumirão valor inteiro (dimensao nodos +
% arestas)
intcon = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69];
opts = gaoptimset('Generations',75,'PopulationSize',500,'EliteCount',50);
tic
[x,fval,exitflag] = ga(f,nvars,A,b,[],[],lb,ub,[],intcon,opts)
toc
%
fprintf('--------------------------------------\n');
x=x';
fprintf('Optimized Solution of x = \n');
x = x(1:nodos,:);
%x'
%fprintf('--------------------------------------\n');
%fprintf('Min hardware found = \n');
%f = f(:,1:nodos);
%f*x
%fprintf('--------------------------------------\n');
fprintf('Software found:');
s*(1-x) + c*abs(E*x)
%
fprintf('--------------------------------------\n');
%--------
